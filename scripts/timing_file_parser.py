"""Contains code to parse timing files generated by index structure evaluator."""

class TimingData:

	def __init__(self, title, xAxis, yAxis):
		self.title = title
		self.xAxis = xAxis
		self.yAxis = yAxis
		self.data = {}

	def addTimingData(self, operation, structure, orderedTuples):
		if not operation in self.data:
			self.data[operation] = {}
		self.data[operation][structure] = orderedTuples

def parseTimingFile(timingFilename, ignoreNegativeValues):
	with open(timingFilename, "r") as f:
		# Read header information and construct container for data
		title = f.readline()[:-1]
		axes = f.readline()[:-1]
		axes = axes.split()
		data = TimingData(title, axes[0], " ".join(axes[1:]))
		# Group remaining lines into structure-operation groups
		# by using blank line as separator
		lines = [ l[:-1] for l in f.readlines() ]
		groups = []
		currentGroup = []
		for l in lines:
			if len(l) == 0: # empty line -- add group and empty buffer
				groups.append(currentGroup)
				currentGroup = []
			else:
				currentGroup.append(l)
		# Add current group if it has contents
		if len(currentGroup) > 0:
			groups.append(currentGroup)
			currentGroup = []

		# Each group should be a structure-operation pair, so organise
		# the contents of each group into an ordered list of tuples
		# and add to the timing dataset
		for group in groups:
			groupFields = [ x.split() for x in group ]
			structure, operation = groupFields[0]
			timingTuples = [ (int(x[0]), float(x[1])) for x in groupFields[1:] ]
			# Remove all "-1" values from tuples if appropriate flag is set
			if ignoreNegativeValues:
				timingTuples = filter(lambda x : x[1] != -1.0, timingTuples)
			timingTuples.sort(key = lambda x : x[0])
			data.addTimingData(operation, structure, timingTuples)

	return data

# When used as an executable script, parse and display contents of timing file
if __name__ == "__main__":
	import sys
	
	if len(sys.argv) < 2:
		sys.exit("python %s <timingFilename>" % sys.argv[0])
	timingFilename = sys.argv[1]

	data = parseTimingFile(timingFilename)

	import pprint
	pp = pprint.PrettyPrinter(indent=4)
	pp.pprint(data.data)